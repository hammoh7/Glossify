generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Courses {
  id              String  @id @default(uuid()) @map("_id") 
  title           String
  imageSrc        String

  userProgress    UserProgress[]
  units           Units[]        
}

model UserProgress {
  userId          String  @id @default(uuid()) @map("_id")
  userName        String  @default("User")
  userImageSrc    String  @default("/image.jpeg")
  activeCourseId  String
  hearts          Int     @default(5)
  points          Int     @default(0) 

  activeCourse    Courses @relation(fields: [activeCourseId], references: [id], onDelete: Cascade)
}

model Units {
  id              String  @id @default(uuid()) @map("_id")
  courseId        String
  title           String
  description     String
  order           Int

  course          Courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons         Lessons[]
}

model Lessons {
  id              String  @id @default(uuid()) @map("_id")
  unitId          String
  title           String
  order           Int

  units             Units   @relation(fields: [unitId], references: [id], onDelete: Cascade)
  challenges        Challenges[]
  challengeProgress ChallengeProgress[] 
}

model Challenges {
  id              String  @id @default(uuid()) @map("_id")
  lessonId        String
  type            ChallengeType
  question        String
  order           Int

  lesson            Lessons      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  challengeOptions  ChallengeOption[]
  challengeProgress ChallengeProgress[]
}

enum ChallengeType {
  SELECT
  ASSIST
}

model ChallengeOption {
  id               String  @id @default(uuid()) @map("_id")
  challengeId      String
  text             String
  correct          Boolean
  imageSrc         String?
  audioSrc         String?

  challenge        Challenges   @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model ChallengeProgress {
  id               String   @id @default(uuid()) @map("_id")
  userId           String
  lessonId         String 
  challengeId      String
  completed        Boolean  @default(false)

  challenge        Challenges      @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  lesson           Lessons         @relation(fields: [lessonId], references: [id])
}
